{"version":3,"file":"main.js","sources":["../../../public_src/scripts/common/diff_match_patch.js","../../../public_src/scripts/common/templates/helpers.js","../../../public_src/scripts/common/templates/.partials_compiled.js","../../../public_src/scripts/common/templates/.templates_compiled.js","../../../public_src/scripts/common/templates/main.js","../../../public_src/scripts/edit/templates/.templates_compiled.js","../../../public_src/scripts/edit/templates/main.js","../../../public_src/scripts/common/ModalView.js","../../../public_src/scripts/common/PromptView.js","../../../public_src/scripts/edit/EditView.js","../../../public_src/scripts/edit/main.js"],"names":[],"mappings":"AA8BA,QAAA,oBAMA,KAAA,aAAA,EAEA,KAAA,cAAA,EAEA,KAAA,gBAAA,GAIA,KAAA,eAAA,IAKA,KAAA,sBAAA,GAEA,KAAA,aAAA,EAGA,KAAA,cAAA,GCrDA,OAAA,4BACA,UACA,SAAA,GACA,OACA,OAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,EAAA,MAAA,IAAA,SAAA,GACA,MAAA,GAAA,KAAA,EAAA,KAAA,GAAA,MACA,KAAA,KAEA,EAAA,WAAA,EAAA,IAEA,EAAA,EAAA,GAAA,MAAA,QAAA,kCAAA,SAAA,EAAA,EAAA,GACA,MAAA,IAAA,EACA,EAAA,YAEA,GAOA,OAHA,IAAA,EACA,GAAA,gBCpBA,OAAA,4BAAA,cAAA,SAAA,GAwCA,MAtCA,MAAA,IAAA,KAAA,QAEA,EAAA,gBAAA,gBAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAMA,MALA,MAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,MAIA,kHAGA,EAAA,gBAAA,qBAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAMA,MALA,MAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,MAIA,mHAGA,EAAA,gBAAA,mBAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAMA,MALA,MAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,MAIA,8uHAGA,EAAA,gBAAA,gBAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAMA,MALA,MAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,MAIA,uhEAGA,KAAA,MCxCA,OAAA,6BAAA,cAAA,SAAA,GAoDA,MAlDA,MAAA,IAAA,KAAA,QAEA,KAAA,IAAA,gBAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,KACA,IAAA,GAAA,EAAA,GAAA,EAAA,WAAA,EAAA,KAAA,gBAoBA,OAjBA,IAAA,4BACA,EAAA,EAAA,MAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,KAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,KACA,EAAA,EAAA,WAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,UAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,kBACA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,GAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,+FACA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,IAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,0BAIA,KAAA,IAAA,gBAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,KACA,IAAA,GAAA,EAAA,GAAA,EAAA,WAAA,EAAA,KAAA,gBAgBA,OAbA,IAAA,iXACA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,MAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,uEACA,EAAA,EAAA,MAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,KAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,IACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,oEACA,EAAA,EAAA,QAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,OAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,IACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,4HAIA,KAAA,MCpDA,OAAA,yBACA,aACA,YACA,2BACA,4BACA,UACA,SAAA,EAAA,EAAA,EAAA,EAAA,GAMA,MAJA,GAAA,KAAA,MAAA,SAAA,EAAA,GACA,EAAA,eAAA,EAAA,KAGA,IAGA,OAAA,oBAAA,yBAAA,SAAA,GAAA,MAAA,KCfA,OAAA,2BAAA,cAAA,SAAA,GA2GA,MAzGA,MAAA,IAAA,KAAA,QAEA,KAAA,IAAA,KAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAKA,QAAA,GAAA,EAAA,GAEA,GAAA,GAAA,EAAA,EAKA,OAJA,IAAA,YACA,EAAA,EAAA,cAAA,EAAA,oBAAA,mBAAA,EAAA,EAAA,EAAA,IACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,WAIA,QAAA,GAAA,EAAA,GAEA,GAAA,GAAA,EAAA,EAKA,OAJA,IAAA,YACA,EAAA,EAAA,cAAA,EAAA,sBAAA,qBAAA,EAAA,EAAA,EAAA,IACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,WAIA,QAAA,GAAA,EAAA,GAEA,GAAA,GAAA,EAAA,EAKA,OAJA,IAAA,YACA,EAAA,EAAA,cAAA,EAAA,iBAAA,gBAAA,EAAA,EAAA,EAAA,IACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,WA9BA,KAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,KAAA,MAAA,EAAA,EAAA,UAAA,EAAA,KACA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,WAAA,EAAA,KAAA,iBAAA,EAAA,EAAA,aAuDA,OAvBA,IAAA,snBACA,EAAA,EAAA,MAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,KAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,sGACA,GAAA,MACA,GAAA,YACA,QAAA,EAAA,KAAA,GAAA,EAAA,QAAA,EAAA,EAAA,GAAA,KAAA,GACA,EAAA,EAAA,QAAA,EAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,SAAA,GAAA,EAAA,KAAA,EAAA,SAAA,EAAA,SAAA,IACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,uGACA,GAAA,MACA,GAAA,cACA,QAAA,EAAA,KAAA,GAAA,EAAA,QAAA,EAAA,EAAA,GAAA,KAAA,GACA,EAAA,EAAA,QAAA,EAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,SAAA,GAAA,EAAA,KAAA,EAAA,SAAA,EAAA,SAAA,IACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,kGACA,GAAA,MACA,GAAA,eACA,QAAA,EAAA,KAAA,GAAA,EAAA,QAAA,EAAA,EAAA,GAAA,KAAA,GACA,EAAA,EAAA,QAAA,EAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,KAAA,EAAA,SAAA,EAAA,MAAA,IACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,4kCAIA,KAAA,IAAA,gBAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,KACA,IAAA,GAAA,EAAA,GAAA,EAAA,WAAA,EAAA,KAAA,gBAYA,OATA,IAAA,iBACA,EAAA,EAAA,MAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,KAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,4BACA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,IAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,qBAIA,KAAA,IAAA,cAAA,EAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAKA,QAAA,GAAA,EAAA,GAEA,GAAA,GAAA,EAAA,EAQA,OAPA,IAAA,WACA,EAAA,EAAA,MAAA,EAAA,EAAA,KAAA,GAAA,QAAA,KAAA,KACA,EAAA,EAAA,KAAA,QAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GACA,GAAA,EAAA,GACA,UACA,GAAA,EAAA,EAAA,QAAA,EAAA,MAAA,GAAA,KAAA,EAAA,EAAA,EAAA,cAAA,KAAA,EAAA,EAAA,MAAA,GAAA,IACA,gBAbA,KAAA,cAAA,EAAA,YACA,EAAA,KAAA,MAAA,EAAA,EAAA,SAAA,EAAA,KACA,IAAA,GAAA,EAAA,GAAA,EAAA,WAAA,EAAA,KAAA,iBAAA,EAAA,IAkBA,OAHA,GAAA,EAAA,KAAA,KAAA,EAAA,EAAA,OAAA,QAAA,QAAA,EAAA,KAAA,GAAA,EAAA,QAAA,EAAA,EAAA,GAAA,KAAA,KACA,GAAA,IAAA,KAAA,GAAA,GACA,GAAA,OAIA,KAAA,MC3GA,OAAA,uBACA,aACA,mBACA,0BACA,UACA,SAAA,EAAA,EAAA,GAEA,MAAA,KAGA,OAAA,kBAAA,uBAAA,SAAA,GAAA,MAAA,KCVA,OAAA,oBACA,WACA,oBACA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,QACA,SAAA,EAAA,gBAEA,WAAA,SAAA,GACA,KAAA,MAAA,EAAA,MACA,KAAA,KAAA,EAAA,KACA,KAAA,OAAA,EAAA,OAEA,KAAA,UAGA,OAAA,WACA,KAAA,IAAA,KAAA,KAAA,UACA,MAAA,KAAA,MACA,KAAA,KAAA,KACA,OAAA,KAAA,UAGA,EAAA,SAAA,MAAA,OAAA,KAAA,KAEA,KAAA,EAAA,UAAA,UAIA,OAAA,KC5BA,OAAA,qBACA,oBACA,SAAA,GACA,GAAA,GAAA,EAAA,QACA,QACA,gBAAA,KACA,mBAAA,UAEA,WAAA,SAAA,GACA,KAAA,MAAA,EAAA,OAAA,GACA,KAAA,MAAA,EAAA,QAAA,IAAA,mDACA,KAAA,OAAA,mLAGA,KAAA,SAEA,KAAA,EAAA,iBAAA,SAEA,GAAA,WACA,KAAA,QAAA,UAAA,KAAA,QAAA,SAAA,KAAA,EAAA,iBAAA,QAEA,OAAA,WACA,KAAA,QAAA,UAAA,KAAA,QAAA,SAAA,QAIA,OAAA,IRuCA,IAAA,aAAA,GACA,YAAA,EACA,WAAA,CAGA,kBAAA,KAgBA,iBAAA,UAAA,UAAA,SAAA,EAAA,EAAA,EACA,GAEA,mBAAA,KAEA,EADA,KAAA,cAAA,EACA,OAAA,WAEA,GAAA,OAAA,UAAA,IAAA,KAAA,aAGA,IAAA,GAAA,CAGA,IAAA,MAAA,GAAA,MAAA,EACA,KAAA,IAAA,OAAA,0BAIA,IAAA,GAAA,EACA,MAAA,KACA,WAAA,MAKA,oBAAA,KACA,GAAA,EAEA,IAAA,GAAA,EAGA,EAAA,KAAA,kBAAA,EAAA,GACA,EAAA,EAAA,UAAA,EAAA,EACA,GAAA,EAAA,UAAA,GACA,EAAA,EAAA,UAAA,GAGA,EAAA,KAAA,kBAAA,EAAA,EACA,IAAA,GAAA,EAAA,UAAA,EAAA,OAAA,EACA,GAAA,EAAA,UAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,UAAA,EAAA,EAAA,OAAA,EAGA,IAAA,GAAA,KAAA,cAAA,EAAA,EAAA,EAAA,EAUA,OAPA,IACA,EAAA,SAAA,WAAA,IAEA,GACA,EAAA,MAAA,WAAA,IAEA,KAAA,kBAAA,GACA,GAgBA,iBAAA,UAAA,cAAA,SAAA,EAAA,EAAA,EACA,GACA,GAAA,EAEA,KAAA,EAEA,QAAA,YAAA,GAGA,KAAA,EAEA,QAAA,YAAA,GAGA,IAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,EACA,EAAA,EAAA,OAAA,EAAA,OAAA,EAAA,EACA,EAAA,EAAA,QAAA,EACA,IAAA,IAAA,EASA,MAPA,KAAA,YAAA,EAAA,UAAA,EAAA,KACA,WAAA,IACA,YAAA,EAAA,UAAA,EAAA,EAAA,UAEA,EAAA,OAAA,EAAA,SACA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,aAEA,CAGA,IAAA,GAAA,EAAA,OAGA,QAAA,YAAA,IAAA,YAAA,GAIA,IAAA,GAAA,KAAA,gBAAA,EAAA,EACA,IAAA,EAAA,CAEA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GAEA,EAAA,KAAA,UAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,UAAA,EAAA,EAAA,EAAA,EAEA,OAAA,GAAA,SAAA,WAAA,IAAA,GAGA,MAAA,IAAA,EAAA,OAAA,KAAA,EAAA,OAAA,IACA,KAAA,eAAA,EAAA,EAAA,GAGA,KAAA,aAAA,EAAA,EAAA,IAcA,iBAAA,UAAA,eAAA,SAAA,EAAA,EAAA,GAEA,GAAA,GAAA,KAAA,mBAAA,EAAA,EACA,GAAA,EAAA,OACA,EAAA,EAAA,MACA,IAAA,GAAA,EAAA,UAEA,EAAA,KAAA,UAAA,EAAA,GAAA,EAAA,EAGA,MAAA,mBAAA,EAAA,GAEA,KAAA,qBAAA,GAIA,EAAA,MAAA,WAAA,IAMA,KALA,GAAA,GAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GACA,EAAA,GACA,EAAA,EAAA,QAAA,CACA,OAAA,EAAA,GAAA,IACA,IAAA,aACA,IACA,GAAA,EAAA,GAAA,EACA,MACA,KAAA,aACA,IACA,GAAA,EAAA,GAAA,EACA,MACA,KAAA,YAEA,GAAA,GAAA,GAAA,GAAA,EAAA,CAEA,EAAA,OAAA,EAAA,EAAA,EACA,EAAA,GACA,EAAA,EAAA,EAAA,CAEA,KAAA,GADA,GAAA,KAAA,UAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,OAEA,EAAA,EACA,EAAA,EACA,EAAA,GACA,EAAA,GAGA,IAIA,MAFA,GAAA,MAEA,GAcA,iBAAA,UAAA,aAAA,SAAA,EAAA,EAAA,GAWA,IAAA,GATA,GAAA,EAAA,OACA,EAAA,EAAA,OACA,EAAA,KAAA,MAAA,EAAA,GAAA,GACA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,GAAA,OAAA,GACA,EAAA,GAAA,OAAA,GAGA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,GACA,EAAA,GAAA,EAEA,GAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,CAWA,KAAA,GAVA,GAAA,EAAA,EAGA,EAAA,GAAA,EAAA,EAGA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,MAEA,GAAA,OAAA,UAAA,GAFA,IAAA,CAOA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CACA,GACA,GADA,EAAA,EAAA,CAGA,GADA,IAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAEA,EAAA,EAAA,GAAA,CAGA,KADA,GAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,OAAA,IAAA,EAAA,OAAA,IACA,IACA,GAGA,IADA,EAAA,GAAA,EACA,EAAA,EAEA,GAAA,MACA,IAAA,EAAA,EAEA,GAAA,MACA,IAAA,EAAA,CACA,GAAA,GAAA,EAAA,EAAA,CACA,IAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GAAA,CAEA,GAAA,GAAA,EAAA,EAAA,EACA,IAAA,GAAA,EAEA,MAAA,MAAA,kBAAA,EAAA,EAAA,EAAA,EAAA,KAOA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CACA,GACA,GADA,EAAA,EAAA,CAGA,GADA,IAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAEA,EAAA,EAAA,GAAA,CAGA,KADA,GAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,OAAA,EAAA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,IACA,IACA,GAGA,IADA,EAAA,GAAA,EACA,EAAA,EAEA,GAAA,MACA,IAAA,EAAA,EAEA,GAAA,MACA,KAAA,EAAA,CACA,GAAA,GAAA,EAAA,EAAA,CACA,IAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GAAA,CACA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,CAGA,IADA,EAAA,EAAA,EACA,GAAA,EAEA,MAAA,MAAA,kBAAA,EAAA,EAAA,EAAA,EAAA,MAQA,QAAA,YAAA,IAAA,YAAA,KAeA,iBAAA,UAAA,kBAAA,SAAA,EAAA,EAAA,EAAA,EACA,GACA,GAAA,GAAA,EAAA,UAAA,EAAA,GACA,EAAA,EAAA,UAAA,EAAA,GACA,EAAA,EAAA,UAAA,GACA,EAAA,EAAA,UAAA,GAGA,EAAA,KAAA,UAAA,EAAA,GAAA,EAAA,GACA,EAAA,KAAA,UAAA,EAAA,GAAA,EAAA,EAEA,OAAA,GAAA,OAAA,IAeA,iBAAA,UAAA,mBAAA,SAAA,EAAA,GAgBA,QAAA,GAAA,GASA,IARA,GAAA,GAAA,GAIA,EAAA,EACA,EAAA,GAEA,EAAA,EAAA,OACA,EAAA,EAAA,OAAA,GAAA,CACA,EAAA,EAAA,QAAA,KAAA,GACA,IAAA,IACA,EAAA,EAAA,OAAA,EAEA,IAAA,GAAA,EAAA,UAAA,EAAA,EAAA,EACA,GAAA,EAAA,GAEA,EAAA,eAAA,EAAA,eAAA,GACA,SAAA,EAAA,IACA,GAAA,OAAA,aAAA,EAAA,KAEA,GAAA,OAAA,aAAA,GACA,EAAA,GAAA,EACA,EAAA,KAAA,GAGA,MAAA,GAzCA,GAAA,MACA,IAIA,GAAA,GAAA,EAuCA,IAAA,GAAA,EAAA,GACA,EAAA,EAAA,EACA,QAAA,OAAA,EAAA,OAAA,EAAA,UAAA,IAWA,iBAAA,UAAA,mBAAA,SAAA,EAAA,GACA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAGA,IAAA,GAFA,GAAA,EAAA,GAAA,GACA,KACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,EAAA,EAAA,WAAA,GAEA,GAAA,GAAA,GAAA,EAAA,KAAA,MAYA,iBAAA,UAAA,kBAAA,SAAA,EAAA,GAEA,IAAA,IAAA,GAAA,EAAA,OAAA,IAAA,EAAA,OAAA,GACA,MAAA,EAQA,KAJA,GAAA,GAAA,EACA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,QACA,EAAA,EACA,EAAA,EACA,EAAA,GACA,EAAA,UAAA,EAAA,IACA,EAAA,UAAA,EAAA,IACA,EAAA,EACA,EAAA,GAEA,EAAA,EAEA,EAAA,KAAA,OAAA,EAAA,GAAA,EAAA,EAEA,OAAA,IAUA,iBAAA,UAAA,kBAAA,SAAA,EAAA,GAEA,IAAA,IAAA,GACA,EAAA,OAAA,EAAA,OAAA,IAAA,EAAA,OAAA,EAAA,OAAA,GACA,MAAA,EAQA,KAJA,GAAA,GAAA,EACA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,QACA,EAAA,EACA,EAAA,EACA,EAAA,GACA,EAAA,UAAA,EAAA,OAAA,EAAA,EAAA,OAAA,IACA,EAAA,UAAA,EAAA,OAAA,EAAA,EAAA,OAAA,IACA,EAAA,EACA,EAAA,GAEA,EAAA,EAEA,EAAA,KAAA,OAAA,EAAA,GAAA,EAAA,EAEA,OAAA,IAYA,iBAAA,UAAA,oBAAA,SAAA,EAAA,GAEA,GAAA,GAAA,EAAA,OACA,EAAA,EAAA,MAEA,IAAA,GAAA,GAAA,GAAA,EACA,MAAA,EAGA,GAAA,EACA,EAAA,EAAA,UAAA,EAAA,GACA,EAAA,IACA,EAAA,EAAA,UAAA,EAAA,GAEA,IAAA,GAAA,KAAA,IAAA,EAAA,EAEA,IAAA,GAAA,EACA,MAAA,EAQA,KAFA,GAAA,GAAA,EACA,EAAA,IACA,CACA,GAAA,GAAA,EAAA,UAAA,EAAA,GACA,EAAA,EAAA,QAAA,EACA,IAAA,IAAA,EACA,MAAA,EAEA,IAAA,GACA,GAAA,GAAA,EAAA,UAAA,EAAA,IACA,EAAA,UAAA,EAAA,MACA,EAAA,EACA,OAiBA,iBAAA,UAAA,gBAAA,SAAA,EAAA,GAwBA,QAAA,GAAA,EAAA,EAAA,GAMA,IAJA,GAGA,GAAA,EAAA,EAAA,EAHA,EAAA,EAAA,UAAA,EAAA,EAAA,KAAA,MAAA,EAAA,OAAA,IACA,EAAA,GACA,EAAA,GAEA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,KAAA,CACA,GAAA,GAAA,EAAA,kBAAA,EAAA,UAAA,GACA,EAAA,UAAA,IACA,EAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,GACA,EAAA,UAAA,EAAA,GACA,GAAA,OAAA,EAAA,IACA,EAAA,EAAA,UAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,EAAA,GACA,EAAA,EAAA,UAAA,EAAA,EAAA,GACA,EAAA,EAAA,UAAA,EAAA,GACA,EAAA,EAAA,UAAA,EAAA,EAAA,GACA,EAAA,EAAA,UAAA,EAAA,IAGA,MAAA,GAAA,EAAA,QAAA,EAAA,QACA,EAAA,EACA,EAAA,EAAA,GAEA,KA/CA,GAAA,KAAA,cAAA,EAEA,MAAA,KAEA,IAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,EACA,EAAA,EAAA,OAAA,EAAA,OAAA,EAAA,CACA,IAAA,EAAA,OAAA,GAAA,EAAA,EAAA,OAAA,EAAA,OACA,MAAA,KAEA,IAgDA,GAhDA,EAAA,KA2CA,EAAA,EAAA,EAAA,EACA,KAAA,KAAA,EAAA,OAAA,IAEA,EAAA,EAAA,EAAA,EACA,KAAA,KAAA,EAAA,OAAA,GAEA,KAAA,IAAA,EACA,MAAA,KAOA,GANA,EAEA,EAIA,EAAA,GAAA,OAAA,EAAA,GAAA,OAAA,EAAA,EAHA,EAFA,CASA,IAAA,GAAA,EAAA,EAAA,CACA,GAAA,OAAA,EAAA,QACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,KAEA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GAEA,IAAA,GAAA,EAAA,EACA,QAAA,EAAA,EAAA,EAAA,EAAA,IAQA,iBAAA,UAAA,qBAAA,SAAA,GAcA,IAbA,GAAA,IAAA,EACA,KACA,EAAA,EAEA,EAAA,KAEA,EAAA,EAEA,EAAA,EACA,EAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,QACA,EAAA,GAAA,IAAA,YACA,EAAA,KAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,GAAA,KAEA,EAAA,GAAA,IAAA,YACA,GAAA,EAAA,GAAA,GAAA,OAEA,GAAA,EAAA,GAAA,GAAA,OAIA,GAAA,EAAA,QACA,KAAA,IAAA,EAAA,IACA,EAAA,QAAA,KAAA,IAAA,EACA,KAEA,EAAA,OAAA,EAAA,EAAA,GAAA,GACA,YAAA,IAEA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,YAEA,IAEA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,KACA,GAAA,IAGA,GAgBA,KAZA,GACA,KAAA,kBAAA,GAEA,KAAA,6BAAA,GAQA,EAAA,EACA,EAAA,EAAA,QAAA,CACA,GAAA,EAAA,EAAA,GAAA,IAAA,aACA,EAAA,GAAA,IAAA,YAAA,CACA,GAAA,GAAA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,KAAA,oBAAA,EAAA,GACA,EAAA,KAAA,oBAAA,EAAA,EACA,IAAA,GACA,GAAA,EAAA,OAAA,GACA,GAAA,EAAA,OAAA,KAEA,EAAA,OAAA,EAAA,GACA,WAAA,EAAA,UAAA,EAAA,KACA,EAAA,EAAA,GAAA,GACA,EAAA,UAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,GAAA,GAAA,EAAA,UAAA,GACA,MAGA,GAAA,EAAA,OAAA,GACA,GAAA,EAAA,OAAA,KAGA,EAAA,OAAA,EAAA,GACA,WAAA,EAAA,UAAA,EAAA,KACA,EAAA,EAAA,GAAA,GAAA,YACA,EAAA,EAAA,GAAA,GACA,EAAA,UAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,GAAA,GAAA,YACA,EAAA,EAAA,GAAA,GACA,EAAA,UAAA,GACA,KAGA,IAEA,MAWA,iBAAA,UAAA,6BAAA,SAAA,GAWA,QAAA,GAAA,EAAA,GACA,IAAA,IAAA,EAEA,MAAA,EAQA,IAAA,GAAA,EAAA,OAAA,EAAA,OAAA,GACA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,MAAA,iBAAA,uBACA,EAAA,EAAA,MAAA,iBAAA,uBACA,EAAA,GACA,EAAA,MAAA,iBAAA,kBACA,EAAA,GACA,EAAA,MAAA,iBAAA,kBACA,EAAA,GACA,EAAA,MAAA,iBAAA,iBACA,EAAA,GACA,EAAA,MAAA,iBAAA,iBACA,EAAA,GACA,EAAA,MAAA,iBAAA,oBACA,EAAA,GACA,EAAA,MAAA,iBAAA,qBAEA,OAAA,IAAA,EAEA,EACA,GAAA,EAEA,EACA,IAAA,GAAA,EAEA,EACA,GAAA,EAEA,EACA,GAAA,EAEA,EAEA,EAKA,IAFA,GAAA,GAAA,EAEA,EAAA,EAAA,OAAA,GAAA,CACA,GAAA,EAAA,EAAA,GAAA,IAAA,YACA,EAAA,EAAA,GAAA,IAAA,WAAA,CAEA,GAAA,GAAA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,EAAA,GAAA,GAGA,EAAA,KAAA,kBAAA,EAAA,EACA,IAAA,EAAA,CACA,GAAA,GAAA,EAAA,UAAA,EAAA,OAAA,EACA,GAAA,EAAA,UAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,EAAA,UAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,EASA,IALA,GAAA,GAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,OAAA,KAAA,EAAA,OAAA,IAAA,CACA,GAAA,EAAA,OAAA,GACA,EAAA,EAAA,UAAA,GAAA,EAAA,OAAA,GACA,EAAA,EAAA,UAAA,EACA,IAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAEA,IAAA,IACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GAIA,EAAA,EAAA,GAAA,IAAA,IAEA,EACA,EAAA,EAAA,GAAA,GAAA,GAEA,EAAA,OAAA,EAAA,EAAA,GACA,KAEA,EAAA,GAAA,GAAA,EACA,EACA,EAAA,EAAA,GAAA,GAAA,GAEA,EAAA,OAAA,EAAA,EAAA,GACA,MAIA,MAKA,iBAAA,sBAAA,eACA,iBAAA,iBAAA,KACA,iBAAA,gBAAA,SACA,iBAAA,mBAAA,WACA,iBAAA,qBAAA,cAMA,iBAAA,UAAA,uBAAA,SAAA,GAgBA,IAfA,GAAA,IAAA,EACA,KACA,EAAA,EAEA,EAAA,KAEA,EAAA,EAEA,GAAA,EAEA,GAAA,EAEA,GAAA,EAEA,GAAA,EACA,EAAA,EAAA,QACA,EAAA,GAAA,IAAA,YACA,EAAA,GAAA,GAAA,OAAA,KAAA,gBACA,GAAA,IAEA,EAAA,KAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,GAAA,KAGA,EAAA,EACA,EAAA,MAEA,EAAA,GAAA,IAEA,EAAA,GAAA,IAAA,YACA,GAAA,EAEA,GAAA,EAUA,IAAA,GAAA,GAAA,GAAA,GACA,EAAA,OAAA,KAAA,cAAA,GACA,GAAA,EAAA,EAAA,EAAA,KAEA,EAAA,OAAA,EAAA,EAAA,GAAA,GACA,YAAA,IAEA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,YACA,IACA,EAAA,KACA,GAAA,GAEA,EAAA,GAAA,EACA,EAAA,IAEA,IACA,EAAA,EAAA,EACA,EAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAEA,GAAA,IAGA,GAGA,IACA,KAAA,kBAAA,IAUA,iBAAA,UAAA,kBAAA,SAAA,GACA,EAAA,MAAA,WAAA,IAOA,KANA,GAKA,GALA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,GACA,EAAA,GAEA,EAAA,EAAA,QACA,OAAA,EAAA,GAAA,IACA,IAAA,aACA,IACA,GAAA,EAAA,GAAA,GACA,GACA,MACA,KAAA,aACA,IACA,GAAA,EAAA,GAAA,GACA,GACA,MACA,KAAA,YAEA,EAAA,EAAA,GACA,IAAA,GAAA,IAAA,IAEA,EAAA,KAAA,kBAAA,EAAA,GACA,IAAA,IACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,GAAA,IACA,WACA,EAAA,EAAA,EAAA,EAAA,GAAA,IACA,EAAA,UAAA,EAAA,IAEA,EAAA,OAAA,EAAA,GAAA,WACA,EAAA,UAAA,EAAA,KACA,KAEA,EAAA,EAAA,UAAA,GACA,EAAA,EAAA,UAAA,IAGA,EAAA,KAAA,kBAAA,EAAA,GACA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,UAAA,EAAA,OACA,GAAA,EAAA,GAAA,GACA,EAAA,EAAA,UAAA,EAAA,EAAA,OACA,GACA,EAAA,EAAA,UAAA,EAAA,EAAA,OACA,KAIA,IAAA,EACA,EAAA,OAAA,EAAA,EACA,EAAA,GAAA,YAAA,IACA,IAAA,EACA,EAAA,OAAA,EAAA,EACA,EAAA,GAAA,YAAA,IAEA,EAAA,OAAA,EAAA,EAAA,EACA,EAAA,GAAA,YAAA,IACA,YAAA,IAEA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GACA,IAAA,GAAA,EAAA,EAAA,GAAA,IAAA,YAEA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GACA,EAAA,OAAA,EAAA,IAEA,IAEA,EAAA,EACA,EAAA,EACA,EAAA,GACA,EAAA,GAIA,KAAA,EAAA,EAAA,OAAA,GAAA,IACA,EAAA,KAMA,IAAA,IAAA,CAGA,KAFA,EAAA,EAEA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,GAAA,IAAA,YACA,EAAA,EAAA,GAAA,IAAA,akBAAA,IAaA,iBAAA,UAAA,YAAA,SAAA,EAAA,GACA,GAIA,GAJA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,CAEA,KAAA,EAAA,EAAA,EAAA,EAAA,SACA,EAAA,GAAA,KAAA,cACA,GAAA,EAAA,GAAA,GAAA,QAEA,EAAA,GAAA,KAAA,cACA,GAAA,EAAA,GAAA,GAAA,UAEA,EAAA,IAPA,IAUA,EAAA,EACA,EAAA,CAGA,OAAA,GAAA,QAAA,GAAA,EAAA,GAAA,KAAA,YACA,EAGA,GAAA,EAAA,IASA,iBAAA,UAAA,gBAAA,SAAA,GAMA,IAAA,GALA,MACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,QAAA,EAAA,SAAA,QAAA,EAAA,QACA,QAAA,EAAA,QAAA,QAAA,EAAA,aACA,QAAA,GACA,IAAA,aACA,EAAA,GAAA,oCAAA,EAAA,QACA,MACA,KAAA,aACA,EAAA,GAAA,oCAAA,EAAA,QACA,MACA,KAAA,YACA,EAAA,GAAA,SAAA,EAAA,WAIA,MAAA,GAAA,KAAA,KASA,iBAAA,UAAA,WAAA,SAAA,GAEA,IAAA,GADA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,KAAA,cACA,EAAA,GAAA,EAAA,GAAA,GAGA,OAAA,GAAA,KAAA,KASA,iBAAA,UAAA,WAAA,SAAA,GAEA,IAAA,GADA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,KAAA,cACA,EAAA,GAAA,EAAA,GAAA,GAGA,OAAA,GAAA,KAAA,KAUA,iBAAA,UAAA,iBAAA,SAAA,GAIA,IAAA,GAHA,GAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,EACA,QAAA,GACA,IAAA,aACA,GAAA,EAAA,MACA,MACA,KAAA,aACA,GAAA,EAAA,MACA,MACA,KAAA,YAEA,GAAA,KAAA,IAAA,EAAA,GACA,EAAA,EACA,EAAA,GAKA,MADA,IAAA,KAAA,IAAA,EAAA,IAaA,iBAAA,UAAA,aAAA,SAAA,GAEA,IAAA,GADA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,OAAA,EAAA,GAAA,IACA,IAAA,aACA,EAAA,GAAA,IAAA,UAAA,EAAA,GAAA,GACA,MACA,KAAA,aACA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,MACA,MACA,KAAA,YACA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,OAIA,MAAA,GAAA,KAAA,KAAA,QAAA,OAAA,MAYA,iBAAA,UAAA,eAAA,SAAA,EAAA,GAKA,IAAA,GAJA,MACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,MAAA,OACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAGA,GAAA,GAAA,EAAA,GAAA,UAAA,EACA,QAAA,EAAA,GAAA,OAAA,IACA,IAAA,IACA,IACA,EAAA,MAAA,YAAA,UAAA,IACA,MAAA,GAEA,KAAA,IAAA,OAAA,qCAAA,GAEA,KACA,KAAA,IAEA,IAAA,IACA,GAAA,GAAA,SAAA,EAAA,GACA,IAAA,MAAA,IAAA,EAAA,EACA,KAAA,IAAA,OAAA,qCAAA,EAEA,IAAA,GAAA,EAAA,UAAA,EAAA,GAAA,EAEA,GAAA,KADA,KAAA,EAAA,GAAA,OAAA,IACA,WAAA,IAEA,YAAA,EAEA,MACA,SAGA,GAAA,EAAA,GACA,KAAA,IAAA,OAAA,6CACA,EAAA,KAIA,GAAA,GAAA,EAAA,OACA,KAAA,IAAA,OAAA,iBAAA,EACA,wCAAA,EAAA,OAAA,KAEA,OAAA,IAcA,iBAAA,UAAA,WAAA,SAAA,EAAA,EAAA,GAEA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,EACA,KAAA,IAAA,OAAA,2BAIA,OADA,GAAA,KAAA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,SACA,GAAA,EAEA,EACA,EAAA,OAGA,EAAA,UAAA,EAAA,EAAA,EAAA,SAAA,EAEA,EAGA,KAAA,aAAA,EAAA,EAAA,GANA,IAoBA,iBAAA,UAAA,aAAA,SAAA,EAAA,EAAA,GAkBA,QAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,OACA,EAAA,KAAA,IAAA,EAAA,EACA,OAAA,GAAA,eAIA,EAAA,EAAA,EAAA,eAFA,EAAA,EAAA,EAtBA,GAAA,EAAA,OAAA,KAAA,cACA,KAAA,IAAA,OAAA,qCAIA,IAAA,GAAA,KAAA,gBAAA,GAEA,EAAA,KAqBA,EAAA,KAAA,gBAEA,EAAA,EAAA,QAAA,EAAA,EACA,KAAA,IACA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,GAEA,EAAA,EAAA,YAAA,EAAA,EAAA,EAAA,QACA,IAAA,IACA,EACA,KAAA,IAAA,EAAA,EAAA,GAAA,IAKA,IAAA,GAAA,GAAA,EAAA,OAAA,CACA,GAAA,EAKA,KAAA,GAHA,GAAA,EAEA,EADA,EAAA,EAAA,OAAA,EAAA,OAEA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAMA,IAFA,EAAA,EACA,EAAA,EACA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,EAEA,EAAA,EAEA,EAAA,KAAA,OAAA,EAAA,GAAA,EAAA,EAGA,GAAA,CACA,IAAA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,QAAA,EAAA,OAEA,EAAA,MAAA,EAAA,EACA,GAAA,EAAA,IAAA,GAAA,GAAA,CACA,KAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,CAGA,GAAA,GAAA,EAAA,EAAA,OAAA,EAAA,GAQA,IANA,EAAA,GADA,IAAA,GACA,EAAA,EAAA,EAAA,IAAA,GAAA,GAEA,EAAA,EAAA,EAAA,IAAA,GAAA,GACA,GAAA,EAAA,EAAA,GAAA,EAAA,KAAA,GACA,EAAA,EAAA,GAEA,EAAA,GAAA,EAAA,CACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAGA,IAAA,GAAA,EAAA,CAIA,GAFA,EAAA,EACA,EAAA,EAAA,IACA,EAAA,GAKA,KAHA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,KASA,GAAA,EAAA,EAAA,EAAA,GAAA,EACA,KAEA,GAAA,EAEA,MAAA,IAUA,iBAAA,UAAA,gBAAA,SAAA,GAEA,IAAA,GADA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,EAAA,OAAA,IAAA,CAEA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,EAAA,OAAA,KAAA,GAAA,EAAA,OAAA,EAAA,CAEA,OAAA,IAcA,iBAAA,UAAA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,OAAA,CAQA,IALA,GAAA,GAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SACA,EAAA,EAIA,EAAA,QAAA,IAAA,EAAA,YAAA,IACA,EAAA,OAAA,KAAA,cAAA,KAAA,aACA,KAAA,cACA,GAAA,KAAA,aACA,EAAA,EAAA,UAAA,EAAA,OAAA,EACA,EAAA,OAAA,EAAA,QAAA,EAGA,IAAA,KAAA,YAGA,IAAA,GAAA,EAAA,UAAA,EAAA,OAAA,EAAA,EAAA,OACA,IACA,EAAA,MAAA,SAAA,WAAA,GAGA,IAAA,GAAA,EAAA,UAAA,EAAA,OAAA,EAAA,QACA,EAAA,OAAA,EAAA,QAAA,EACA,IACA,EAAA,MAAA,MAAA,WAAA,IAIA,EAAA,QAAA,EAAA,OACA,EAAA,QAAA,EAAA,OAEA,EAAA,SAAA,EAAA,OAAA,EAAA,OACA,EAAA,SAAA,EAAA,OAAA,EAAA,SA0BA,iBAAA,UAAA,WAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,CACA,IAAA,gBAAA,IAAA,gBAAA,IACA,mBAAA,GAGA,EAAA,EACA,EAAA,KAAA,UAAA,EAAA,GAAA,GACA,EAAA,OAAA,IACA,KAAA,qBAAA,GACA,KAAA,uBAAA,QAEA,IAAA,GAAA,gBAAA,IAAA,mBAAA,IACA,mBAAA,GAGA,EAAA,EACA,EAAA,KAAA,WAAA,OACA,IAAA,gBAAA,IAAA,GAAA,gBAAA,IACA,mBAAA,GAEA,EAAA,EACA,EAAA,MACA,CAAA,GAAA,gBAAA,IAAA,gBAAA,KACA,GAAA,gBAAA,GAMA,KAAA,IAAA,OAAA,qCAHA,GAAA,EACA,EAAA,EAKA,GAAA,IAAA,EAAA,OACA,QAYA,KAAA,GAVA,MACA,EAAA,GAAA,kBAAA,UACA,EAAA,EACA,EAAA,EACA,EAAA,EAIA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAQA,QANA,GAAA,IAAA,aAEA,EAAA,OAAA,EACA,EAAA,OAAA,GAGA,GACA,IAAA,aACA,EAAA,MAAA,KAAA,EAAA,GACA,EAAA,SAAA,EAAA,OACA,EAAA,EAAA,UAAA,EAAA,GAAA,EACA,EAAA,UAAA,EACA,MACA,KAAA,aACA,EAAA,SAAA,EAAA,OACA,EAAA,MAAA,KAAA,EAAA,GACA,EAAA,EAAA,UAAA,EAAA,GACA,EAAA,UAAA,EACA,EAAA,OACA,MACA,KAAA,YACA,EAAA,QAAA,EAAA,KAAA,cACA,GAAA,EAAA,QAAA,EAAA,GAEA,EAAA,MAAA,KAAA,EAAA,GACA,EAAA,SAAA,EAAA,OACA,EAAA,SAAA,EAAA,QACA,EAAA,QAAA,EAAA,KAAA,cAEA,IACA,KAAA,kBAAA,EAAA,GACA,EAAA,KAAA,GACA,EAAA,GAAA,kBAAA,UACA,EAAA,EAKA,EAAA,EACA,EAAA,GAOA,IAAA,cACA,GAAA,EAAA,QAEA,IAAA,cACA,GAAA,EAAA,QASA,MALA,KACA,KAAA,kBAAA,EAAA,GACA,EAAA,KAAA,IAGA,GASA,iBAAA,UAAA,eAAA,SAAA,GAGA,IAAA,GADA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,kBAAA,SACA,GAAA,QACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,MAAA,OAAA,IACA,EAAA,MAAA,GAAA,EAAA,MAAA,GAAA,OAEA,GAAA,OAAA,EAAA,OACA,EAAA,OAAA,EAAA,OACA,EAAA,QAAA,EAAA,QACA,EAAA,QAAA,EAAA,QACA,EAAA,GAAA,EAEA,MAAA,IAYA,iBAAA,UAAA,YAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,OACA,OAAA,KAIA,GAAA,KAAA,eAAA,EAEA,IAAA,GAAA,KAAA,iBAAA,EACA,GAAA,EAAA,EAAA,EAEA,KAAA,eAAA,EAOA,KAAA,GAFA,GAAA,EACA,KACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAEA,GAFA,EAAA,EAAA,GAAA,OAAA,EACA,EAAA,KAAA,WAAA,EAAA,GAAA,OAEA,EAAA,EAkBA,IAjBA,EAAA,OAAA,KAAA,eAGA,EAAA,KAAA,WAAA,EAAA,EAAA,UAAA,EAAA,KAAA,eACA,GACA,IAAA,IACA,EAAA,KAAA,WAAA,EACA,EAAA,UAAA,EAAA,OAAA,KAAA,eACA,EAAA,EAAA,OAAA,KAAA,gBACA,IAAA,GAAA,GAAA,KAEA,EAAA,MAIA,EAAA,KAAA,WAAA,EAAA,EAAA,GAEA,IAAA,EAEA,EAAA,IAAA,EAEA,GAAA,EAAA,GAAA,QAAA,EAAA,GAAA,YACA,CAEA,EAAA,IAAA,EACA,EAAA,EAAA,CACA,IAAA,EAMA,IAJA,EADA,IAAA,EACA,EAAA,UAAA,EAAA,EAAA,EAAA,QAEA,EAAA,UAAA,EAAA,EAAA,KAAA,eAEA,GAAA,EAEA,EAAA,EAAA,UAAA,EAAA,GACA,KAAA,WAAA,EAAA,GAAA,OACA,EAAA,UAAA,EAAA,EAAA,YACA,CAGA,GAAA,GAAA,KAAA,UAAA,EAAA,GAAA,EACA,IAAA,EAAA,OAAA,KAAA,eACA,KAAA,iBAAA,GAAA,EAAA,OACA,KAAA,sBAEA,EAAA,IAAA,MACA,CACA,KAAA,6BAAA,EAGA,KAAA,GADA,GADA,EAAA,EAEA,EAAA,EAAA,EAAA,EAAA,GAAA,MAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GAAA,MAAA,EACA,GAAA,KAAA,aACA,EAAA,KAAA,YAAA,EAAA,IAEA,EAAA,KAAA,YACA,EAAA,EAAA,UAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,UAAA,EAAA,GACA,EAAA,KAAA,cACA,EAAA,EAAA,UAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,KAAA,YAAA,EACA,EAAA,EAAA,GAAA,UAEA,EAAA,KAAA,cACA,GAAA,EAAA,GAAA,YASA,MADA,GAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,SACA,EAAA,IAUA,iBAAA,UAAA,iBAAA,SAAA,GAGA,IAAA,GAFA,GAAA,KAAA,aACA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,IACA,GAAA,OAAA,aAAA,EAIA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,QAAA,EACA,EAAA,GAAA,QAAA,CAIA,IAAA,GAAA,EAAA,GACA,EAAA,EAAA,KACA,IAAA,GAAA,EAAA,QAAA,EAAA,GAAA,IAAA,WAEA,EAAA,SAAA,WAAA,IACA,EAAA,QAAA,EACA,EAAA,QAAA,EACA,EAAA,SAAA,EACA,EAAA,SAAA,MACA,IAAA,EAAA,EAAA,GAAA,GAAA,OAAA,CAEA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,MACA,GAAA,GAAA,GAAA,EAAA,UAAA,EAAA,GAAA,GAAA,QAAA,EAAA,GAAA,GACA,EAAA,QAAA,EACA,EAAA,QAAA,EACA,EAAA,SAAA,EACA,EAAA,SAAA,EAMA,GAFA,EAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,MACA,GAAA,EAAA,QAAA,EAAA,EAAA,OAAA,GAAA,IAAA,WAEA,EAAA,MAAA,WAAA,IACA,EAAA,SAAA,EACA,EAAA,SAAA;IACA,IAAA,EAAA,EAAA,EAAA,OAAA,GAAA,GAAA,OAAA,CAEA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,GAAA,GAAA,MACA,GAAA,EAAA,OAAA,GAAA,IAAA,EAAA,UAAA,EAAA,GACA,EAAA,SAAA,EACA,EAAA,SAAA,EAGA,MAAA,IAUA,iBAAA,UAAA,eAAA,SAAA,GAEA,IAAA,GADA,GAAA,KAAA,cACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,KAAA,EAAA,GAAA,SAAA,GAAA,CAGA,GAAA,GAAA,EAAA,EAEA,GAAA,OAAA,IAAA,EAIA,KAHA,GAAA,GAAA,EAAA,OACA,EAAA,EAAA,OACA,EAAA,GACA,IAAA,EAAA,MAAA,QAAA,CAEA,GAAA,GAAA,GAAA,kBAAA,UACA,GAAA,CAOA,KANA,EAAA,OAAA,EAAA,EAAA,OACA,EAAA,OAAA,EAAA,EAAA,OACA,KAAA,IACA,EAAA,QAAA,EAAA,QAAA,EAAA,OACA,EAAA,MAAA,MAAA,WAAA,KAEA,IAAA,EAAA,MAAA,QACA,EAAA,QAAA,EAAA,KAAA,cAAA,CACA,GAAA,GAAA,EAAA,MAAA,GAAA,GACA,EAAA,EAAA,MAAA,GAAA,EACA,KAAA,aAEA,EAAA,SAAA,EAAA,OACA,GAAA,EAAA,OACA,EAAA,MAAA,KAAA,EAAA,MAAA,SACA,GAAA,GACA,IAAA,aAAA,GAAA,EAAA,MAAA,QACA,EAAA,MAAA,GAAA,IAAA,YACA,EAAA,OAAA,EAAA,GAEA,EAAA,SAAA,EAAA,OACA,GAAA,EAAA,OACA,GAAA,EACA,EAAA,MAAA,MAAA,EAAA,IACA,EAAA,MAAA,UAGA,EAAA,EAAA,UAAA,EACA,EAAA,EAAA,QAAA,KAAA,cACA,EAAA,SAAA,EAAA,OACA,GAAA,EAAA,OACA,IAAA,YACA,EAAA,SAAA,EAAA,OACA,GAAA,EAAA,QAEA,GAAA,EAEA,EAAA,MAAA,MAAA,EAAA,IACA,GAAA,EAAA,MAAA,GAAA,GACA,EAAA,MAAA,QAEA,EAAA,MAAA,GAAA,GACA,EAAA,MAAA,GAAA,GAAA,UAAA,EAAA,SAKA,EAAA,KAAA,WAAA,EAAA,OACA,EACA,EAAA,UAAA,EAAA,OAAA,KAAA,aAEA,IAAA,GAAA,KAAA,WAAA,EAAA,OACA,UAAA,EAAA,KAAA,aACA,MAAA,IACA,EAAA,SAAA,EAAA,OACA,EAAA,SAAA,EAAA,OACA,IAAA,EAAA,MAAA,QACA,EAAA,MAAA,EAAA,MAAA,OAAA,GAAA,KAAA,WACA,EAAA,MAAA,EAAA,MAAA,OAAA,GAAA,IAAA,EAEA,EAAA,MAAA,MAAA,WAAA,KAGA,GACA,EAAA,SAAA,EAAA,EAAA,MAYA,iBAAA,UAAA,aAAA,SAAA,GAEA,IAAA,GADA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,EAAA,EAEA,OAAA,GAAA,KAAA,KAUA,iBAAA,UAAA,eAAA,SAAA,GACA,GAAA,KACA,KAAA,EACA,MAAA,EAKA,KAHA,GAAA,GAAA,EAAA,MAAA,MACA,EAAA,EACA,EAAA,uCACA,EAAA,EAAA,QAAA,CACA,GAAA,GAAA,EAAA,GAAA,MAAA,EACA,KAAA,EACA,KAAA,IAAA,OAAA,yBAAA,EAAA,GAEA,IAAA,GAAA,GAAA,kBAAA,SAyBA,KAxBA,EAAA,KAAA,GACA,EAAA,OAAA,SAAA,EAAA,GAAA,IACA,KAAA,EAAA,IACA,EAAA,SACA,EAAA,QAAA,GACA,KAAA,EAAA,GACA,EAAA,QAAA,GAEA,EAAA,SACA,EAAA,QAAA,SAAA,EAAA,GAAA,KAGA,EAAA,OAAA,SAAA,EAAA,GAAA,IACA,KAAA,EAAA,IACA,EAAA,SACA,EAAA,QAAA,GACA,KAAA,EAAA,GACA,EAAA,QAAA,GAEA,EAAA,SACA,EAAA,QAAA,SAAA,EAAA,GAAA,KAEA,IAEA,EAAA,EAAA,QAAA,CACA,GAAA,GAAA,EAAA,GAAA,OAAA,EACA,KACA,GAAA,GAAA,UAAA,EAAA,GAAA,UAAA,IACA,MAAA,GAEA,KAAA,IAAA,OAAA,qCAAA,GAEA,GAAA,KAAA,EAEA,EAAA,MAAA,MAAA,YAAA,QACA,IAAA,KAAA,EAEA,EAAA,MAAA,MAAA,YAAA,QACA,IAAA,KAAA,EAEA,EAAA,MAAA,MAAA,WAAA,QACA,CAAA,GAAA,KAAA,EAEA,KACA,IAAA,KAAA,EAIA,KAAA,IAAA,OAAA,uBAAA,EAAA,SAAA,GAEA,KAGA,MAAA,IAQA,iBAAA,UAAA,WAEA,KAAA,SAEA,KAAA,OAAA,KAEA,KAAA,OAAA,KAEA,KAAA,QAAA,EAEA,KAAA,QAAA,GAUA,iBAAA,UAAA,UAAA,SAAA,WACA,GAAA,GAAA,CAEA,GADA,IAAA,KAAA,QACA,KAAA,OAAA,KACA,GAAA,KAAA,QACA,KAAA,OAAA,EAEA,KAAA,OAAA,EAAA,IAAA,KAAA,QAGA,EADA,IAAA,KAAA,QACA,KAAA,OAAA,KACA,GAAA,KAAA,QACA,KAAA,OAAA,EAEA,KAAA,OAAA,EAAA,IAAA,KAAA,OAKA,KAAA,GAFA,GADA,GAAA,OAAA,EAAA,KAAA,EAAA,SAGA,EAAA,EAAA,EAAA,KAAA,MAAA,OAAA,IAAA,CACA,OAAA,KAAA,MAAA,GAAA,IACA,IAAA,aACA,EAAA,GACA,MACA,KAAA,aACA,EAAA,GACA,MACA,KAAA,YACA,EAAA,IAGA,EAAA,EAAA,GAAA,EAAA,UAAA,KAAA,MAAA,GAAA,IAAA,KAEA,MAAA,GAAA,KAAA,IAAA,QAAA,OAAA,MAQA,KAAA,iBAAA,iBACA,KAAA,YAAA,YACA,KAAA,YAAA,YACA,KAAA,WAAA,WAEA,OAAA,MAAA,SAAA,GACA,MAAA,YACA,GAAA,EACA,OAAA,IAAA,EAAA,mBAEA,OSvpEA,OAAA,iBACA,SACA,WACA,iBACA,SACA,eACA,oBACA,OACA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,QACA,QAAA,MACA,GAAA,WAEA,SAAA,EAAA,KAEA,QACA,kBAAA,iBACA,qBAAA,mBACA,mBAAA,4BACA,sBAAA,oBACA,mBAAA,OACA,aAAA,iBAGA,WAAA,SAAA,GACA,KAAA,SAAA,KAAA,MAAA,SAAA,KAAA,QACA,KAAA,SAAA,KAAA,MAAA,cAAA,KAAA,gBACA,KAAA,SAAA,KAAA,MAAA,kBAAA,KAAA,oBACA,KAAA,SAAA,KAAA,MAAA,kBAAA,KAAA,oBACA,KAAA,SAAA,KAAA,MAAA,eAAA,KAAA,oBAEA,KAAA,SAAA,EAAA,SAEA,KAAA,OAAA,GAAA,QAAA,KACA,KAAA,OAAA,GAAA,UAAA,EAAA,KAAA,KAAA,gBAAA,OACA,KAAA,OAAA,GAAA,aAAA,EAAA,KAAA,KAAA,YAAA,OACA,KAAA,OAAA,GAAA,eAAA,EAAA,KAAA,KAAA,aAAA,OACA,KAAA,OAAA,GAAA,cAAA,EAAA,KAAA,KAAA,aAAA,OACA,KAAA,OAAA,GAAA,WAAA,EAAA,KAAA,KAAA,UAAA,OACA,KAAA,OAAA,GAAA,UAAA,EAAA,KAAA,KAAA,SAAA,OACA,KAAA,OAAA,GAAA,cAAA,EAAA,KAAA,KAAA,mBAAA,OACA,KAAA,OAAA,GAAA,WAAA,EAAA,KAAA,KAAA,UAAA,OAEA,KAAA,IAAA,GAAA,GAEA,KAAA,OACA,WAAA,EACA,YAAA,EACA,WAAA,GACA,YAAA,IAGA,KAAA,cAGA,OAAA,SAAA,GAEA,IAAA,KAAA,SAAA,CAIA,KAAA,IAAA,KAAA,KAAA,SAAA,KAAA,MAAA,UAEA,IAAA,GAAA,IAEA,oBAAA,KACA,EAAA,WAAA,+CAAA,WACA,EAAA,eAIA,EAAA,aAGA,EAAA,IAAA,UACA,KAAA,EAAA,aAAA,KAAA,WACA,KAAA,kBAGA,KAAA,UAAA,IAGA,WAAA,WACA,OAAA,UAAA,KAAA,OAAA,IAAA,KAAA,KAAA,EAAA,WAAA,IACA,KAAA,EAAA,yBAAA,OAAA,EAAA,QAAA,SAAA,KACA,KAAA,EAAA,WAAA,OAAA,EAAA,YAAA,UAEA,KAAA,qBAEA,KAAA,OAAA,QAEA,EAAA,WAAA,4DAAA,cAEA,EAAA,WAAA,0DAAA,cAGA,KAAA,OAAA,GAAA,SAAA,EAAA,KAAA,KAAA,eAAA,OAEA,KAAA,IAAA,KAAA,OAAA,aAAA,KAGA,mBAAA,WACA,GAAA,KAAA,OAAA,CACA,KAAA,OAAA,SAAA,KAAA,MAAA,IAAA,UACA,KAAA,OAAA,aAAA,QAAA,YAAA,KAAA,MAAA,IAAA,YAEA,IAAA,GAAA,KAAA,MAAA,IAAA,WACA,MAAA,OAAA,mBAAA,EAAA,gBAAA,EAAA,QAIA,eAAA,WACA,GAAA,GAAA,KAAA,MAAA,IAAA,SAAA,SACA,MAAA,EAAA,aAAA,KAAA,GACA,KAAA,OAAA,KAAA,mBACA,KAAA,KAIA,eAAA,WACA,GAAA,GAAA,IAEA,IAAA,IACA,MAAA,WACA,OAAA,+BACA,SAAA,SAAA,GACA,GAAA,GAAA,EAAA,EAAA,aAAA,MAEA,GAAA,MAAA,IAAA,OAAA,GAAA,GAAA,IAEA,IACA,aAAA,aAAA,OAMA,iBAAA,WACA,GAAA,GAAA,aAAA,iBAAA,KAAA,EAAA,eAAA,KACA,MAAA,MAAA,IAAA,WAAA,IAGA,0BAAA,WACA,GAAA,GAAA,aAAA,iBAAA,KAAA,EAAA,aAAA,KACA,MAAA,MAAA,IAAA,WAAA,IAGA,kBAAA,WACA,GAAA,GAAA,aAAA,cAAA,KAAA,EAAA,gBAAA,KACA,MAAA,MAAA,IAAA,QAAA,IAGA,KAAA,SAAA,GACA,GAAA,IAAA,EAAA,MAAA,CACA,GAAA,GAAA,EAAA,KAAA,KAAA,EAAA,YAAA,MACA,MAAA,OAAA,KAAA,QACA,OAAA,KAAA,SACA,IAAA,EACA,KAAA,KAAA,MAAA,IAAA,SAAA,YAGA,KAAA,EAAA,YAAA,IAAA,MAIA,gBAAA,WACA,KAAA,OAAA,KAAA,SACA,OAAA,KAAA,SACA,KAAA,KAAA,MAAA,IAAA,SAAA,aAIA,YAAA,SAAA,GACA,KAAA,OAAA,GAAA,GAGA,aAAA,SAAA,GACA,KAAA,EAAA,YAAA,OAAA,EAAA,gBAAA,IAEA,EAAA,+BAAA,GAAA,kBAGA,aAAA,SAAA,GACA,KAAA,EAAA,cAAA,KAAA,EAAA,eACA,MAAA,KAGA,EAAA,gCAAA,GAAA,iBACA,EAAA,YAAA,KAAA,EAAA,SAGA,eAAA,SAAA,GACA,IAAA,KAAA,WAAA,CAIA,GAAA,GAAA,EAAA,KAEA,EAAA,KAAA,MAAA,EAAA,QACA,EAAA,KAAA,eAAA,GAGA,GAAA,EAAA,SAAA,KAAA,EAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAEA,MAAA,UAAA,KAAA,GAEA,KAAA,eAGA,WAAA,WACA,MAAA,MAAA,SACA,QAAA,IAAA,+BACA,SAGA,KAAA,OAAA,KAAA,cACA,GAAA,KAAA,YACA,GAAA,KAAA,YAGA,KAAA,SAAA,EALA,SAQA,UAAA,SAAA,GACA,KAAA,YAAA,EAAA,EACA,KAAA,WAAA,EAAA,EACA,KAAA,YAAA,EACA,KAAA,IAAA,SAAA,EAAA,GACA,KAAA,YAAA,GAGA,SAAA,SAAA,GACA,GAAA,GAAA,KAAA,YAAA,EAAA,IAAA,KAAA,aAAA,EAAA,KACA,EAAA,GAEA,EAAA,EAAA,GACA,EAAA,KAAA,SAEA,MAAA,UAAA,EAAA,OAAA,EAAA,SAAA,GACA,MAAA,IAAA,EAAA,QAAA,EAAA,MAGA,IACA,QAAA,IAAA,uBAAA,EAAA,IACA,KAAA,YAAA,EAAA,GACA,KAAA,WAAA,EAAA,MAAA,KAAA,WAAA,EAAA,KAGA,KAAA,SAAA,EAEA,KAAA,UAAA,OAAA,GACA,KAAA,cAIA,mBAAA,SAAA,GACA,GAAA,EAAA,IAAA,KAAA,OAAA,GAAA,CAIA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,KAAA,WAEA,IAAA,GAAA,EACA,QAAA,IAAA,sBACA,IAAA,EAAA,GAAA,GAAA,EAAA,CACA,QAAA,IAAA,YACA,IAAA,GAAA,KAAA,IAAA,WACA,EAAA,KAAA,IAAA,gBAAA,KAAA,OAAA,qBACA,EAAA,EACA,EAAA,IACA,MAAA,YAAA,EAEA,GACA,EAAA,KAAA,IAAA,YAAA,EAAA,GAAA,GACA,KAAA,WAAA,KAAA,IAAA,YAAA,EAAA,KAAA,YAAA,KAEA,EAAA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,EAAA,KACA,EAAA,EAAA,UACA,KAAA,WAAA,EAAA,MAAA,KAAA,WAAA,IAIA,KAAA,IAAA,SAAA,GACA,KAAA,OAAA,qBAAA,KAAA,IAAA,gBAAA,IACA,KAAA,OAAA,iBAEA,KAAA,YAAA,EACA,KAAA,YAAA,MACA,GAAA,EAEA,QAAA,IAAA,sCAEA,KAAA,qBACA,QAAA,IAAA,gBAIA,mBAAA,WACA,KAAA,OAAA,KAAA,eAAA,KAAA,cAGA,UAAA,SAAA,GACA,QAAA,IAAA,aAAA,EACA,IAAA,GAAA,EAAA,GACA,EAAA,KAAA,WACA,EAAA,SAAA,KAAA,YAAA,GAEA,MAAA,YAAA,CACA,IAAA,IAAA,CAEA,GAAA,KAAA,EAAA,SAAA,GACA,QAAA,IAAA,QAAA,GAEA,SAAA,EAAA,EAAA,KAAA,EAAA,IACA,GAAA,GAGA,GAAA,EAAA,EAAA,IAEA,EADA,EAAA,EACA,KAAA,IAAA,YAAA,EAAA,EAAA,GAAA,GAEA,EAAA,MAAA,EAAA,EAAA,GAGA,KAAA,YAAA,EAAA,EACA,KAAA,WAAA,IAEA,MAEA,QAAA,IAAA,YAAA,EACA,IAAA,GAAA,KAAA,IAAA,WACA,EAAA,KAAA,IAAA,WAAA,EAAA,GAEA,EAAA,KAAA,OAAA,mBACA,MAAA,IAAA,SAAA,KAAA,IAAA,YAAA,EAAA,IACA,KAAA,OAAA,qBAAA,GACA,KAAA,OAAA,iBAEA,KAAA,YAAA,GAGA,eAAA,SAAA,GACA,GAAA,GAAA,KAAA,IAAA,gBAAA,EAAA,MAAA,OACA,EAAA,EACA,EAAA,GACA,EAAA,KAAA,IAAA,qBAEA,IAAA,eAAA,EAAA,QAAA,eAAA,EAAA,OAAA,CACA,GAAA,GAAA,EAAA,MAAA,OAAA,EAAA,OACA,EAAA,CACA,GAAA,KAAA,EAAA,MAAA,SAAA,GACA,GAAA,EAAA,OACA,GAAA,EAAA,IAIA,EAAA,EAAA,EAAA,MAEA,GAAA,EAAA,EAAA,KAAA,OACA,EAAA,EAAA,IAGA,QACA,MAAA,EACA,IAAA,EACA,KAAA,IAIA,cAAA,WACA,SAAA,KAAA,SAIA,OAAA,KC3XA,OAAA,aACA,aACA,MACA,WACA,SACA,eACA,oBACA,aACA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,UAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,GAAA,MACA,EAAA,GAAA,IACA,MAAA,EACA,SAAA,GAGA,GAAA,MAAA,KAAA,GAEA,EAAA,SAAA,OAAA,EAAA,IAEA,EAAA,KACA,KAAA,aAAA,cAAA,GACA,SAAA,aAAA,kBAAA,aACA,SAAA,aAAA,kBAAA,GACA,MAAA,aAAA,eAAA","sourcesContent":["\n/**\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nfunction diff_match_patch() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n}\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/** @typedef {{0: number, 1: string}} */\ndiff_match_patch.Diff;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n          pointer = pointer + a.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastequality && (lastequality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastequality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0,\n              [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastequality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastequality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastequality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     [DIFF_DELETE, lastequality]);\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastequality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = patch.diffs[y].slice();\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push([DIFF_EQUAL, precontext]);\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push([diff_type, diff_text]);\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diff_type, diff_text]);\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postcontext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push([DIFF_DELETE, line]);\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push([DIFF_INSERT, line]);\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push([DIFF_EQUAL, line]);\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emmulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indicies are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// Export these global variables so that they survive Google's JS compiler.\n// In a browser, 'this' will be 'window'.\n// Users of node.js should 'require' the uncompressed version since Google's\n// JS compiler may break the following exports for non-browser environments.\nthis['diff_match_patch'] = diff_match_patch;\nthis['DIFF_DELETE'] = DIFF_DELETE;\nthis['DIFF_INSERT'] = DIFF_INSERT;\nthis['DIFF_EQUAL'] = DIFF_EQUAL;\n\ndefine(\"dmp\", (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.diff_match_patch;\n    };\n}(this)));\n","\ndefine('common/templates/helpers',[\r\n\t'lodash'\r\n], function (_) {\r\n\treturn {\r\n\t\tselect: function (selected, options) {\r\n\t\t\tvar attrs = _.keys(options.hash).map(function (key) {\r\n\t\t\t\treturn key + '=\"' + options.hash[key] + '\"';\r\n\t\t\t}).join(' ');\r\n\r\n\t\t\tvar ret = '<select ' + attrs + '>';\r\n\r\n\t\t\tvar opts = options.fn(this).replace(/value\\s*=\\s*(\"|')?([^><\\b]*)\\1/g, function (match, match1, match2) {\r\n\t\t\t\tif (match2 == selected) {\r\n\t\t\t\t\treturn match + ' selected';\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn match;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tret += opts;\r\n\t\t\tret += '</select>';\r\n\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t};\r\n});\r\n","\ndefine('common/partials_compiled',['handlebars'], function(Handlebars) {\n\nthis[\"JST\"] = this[\"JST\"] || {};\n\nHandlebars.registerPartial(\"common/footer\", Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div id=\\\"footer\\\"><p class=\\\"copyright\\\">Copyright ⓒ<a class=\\\"corp\\\">NHN Corp.</a>All Rights Reserved.</p></div>\";\n  }));\n\nHandlebars.registerPartial(\"common/keybindings\", Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<option value=\\\"\\\">Ace</option>\\r\\n<option value=\\\"vim\\\">Vim</option>\\r\\n<option value=\\\"emacs\\\">Emacs</option>\\r\\n\";\n  }));\n\nHandlebars.registerPartial(\"common/languages\", Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<option value=\\\"abap\\\">ABAP</option>\\r\\n<option value=\\\"ada\\\">ADA</option>\\r\\n<option value=\\\"actionscript\\\">ActionScript</option>\\r\\n<option value=\\\"asciidoc\\\">AsciiDoc</option>\\r\\n<option value=\\\"assembly_x86\\\">Assembly_x86</option>\\r\\n<option value=\\\"autohotkey\\\">AutoHotKey</option>\\r\\n<option value=\\\"batchfile\\\">BatchFile</option>\\r\\n<option value=\\\"c9search\\\">C9Search</option>\\r\\n<option value=\\\"c_cpp\\\">C/C++</option>\\r\\n<option value=\\\"clojure\\\">Clojure</option>\\r\\n<option value=\\\"cobol\\\">Cobol</option>\\r\\n<option value=\\\"coffee\\\">CoffeeScript</option>\\r\\n<option value=\\\"coldfusion\\\">ColdFusion</option>\\r\\n<option value=\\\"csharp\\\">C#</option>\\r\\n<option value=\\\"css\\\">CSS</option>\\r\\n<option value=\\\"curly\\\">Curly</option>\\r\\n<option value=\\\"d\\\">D</option>\\r\\n<option value=\\\"dart\\\">Dart</option>\\r\\n<option value=\\\"diff\\\">Diff</option>\\r\\n<option value=\\\"dot\\\">Dot</option>\\r\\n<option value=\\\"erlang\\\">Erlang</option>\\r\\n<option value=\\\"ejs\\\">EJS</option>\\r\\n<option value=\\\"forth\\\">Forth</option>\\r\\n<option value=\\\"ftl\\\">FreeMarker</option>\\r\\n<option value=\\\"glsl\\\">Glsl</option>\\r\\n<option value=\\\"golang\\\">Go</option>\\r\\n<option value=\\\"groovy\\\">Groovy</option>\\r\\n<option value=\\\"haml\\\">HAML</option>\\r\\n<option value=\\\"haskell\\\">Haskell</option>\\r\\n<option value=\\\"haxe\\\">haXe</option>\\r\\n<option value=\\\"html\\\">HTML</option>\\r\\n<option value=\\\"html_ruby\\\">HTML (Ruby)</option>\\r\\n<option value=\\\"ini\\\">Ini</option>\\r\\n<option value=\\\"jade\\\">Jade</option>\\r\\n<option value=\\\"java\\\">Java</option>\\r\\n<option value=\\\"javascript\\\">JavaScript</option>\\r\\n<option value=\\\"json\\\">JSON</option>\\r\\n<option value=\\\"jsoniq\\\">JSONiq</option>\\r\\n<option value=\\\"jsp\\\">JSP</option>\\r\\n<option value=\\\"jsx\\\">JSX</option>\\r\\n<option value=\\\"julia\\\">Julia</option>\\r\\n<option value=\\\"latex\\\">LaTeX</option>\\r\\n<option value=\\\"less\\\">LESS</option>\\r\\n<option value=\\\"liquid\\\">Liquid</option>\\r\\n<option value=\\\"lisp\\\">Lisp</option>\\r\\n<option value=\\\"livescript\\\">LiveScript</option>\\r\\n<option value=\\\"logiql\\\">LogiQL</option>\\r\\n<option value=\\\"lsl\\\">LSL</option>\\r\\n<option value=\\\"lua\\\">Lua</option>\\r\\n<option value=\\\"luapage\\\">LuaPage</option>\\r\\n<option value=\\\"lucene\\\">Lucene</option>\\r\\n<option value=\\\"makefile\\\">Makefile</option>\\r\\n<option value=\\\"matlab\\\">MATLAB</option>\\r\\n<option value=\\\"markdown\\\">Markdown</option>\\r\\n<option value=\\\"mysql\\\">MySQL</option>\\r\\n<option value=\\\"mushcode\\\">MUSHCode</option>\\r\\n<option value=\\\"objectivec\\\">Objective-C</option>\\r\\n<option value=\\\"ocaml\\\">OCaml</option>\\r\\n<option value=\\\"pascal\\\">Pascal</option>\\r\\n<option value=\\\"perl\\\">Perl</option>\\r\\n<option value=\\\"pgsql\\\">pgSQL</option>\\r\\n<option value=\\\"php\\\">PHP</option>\\r\\n<option value=\\\"powershell\\\">Powershell</option>\\r\\n<option value=\\\"prolog\\\">Prolog</option>\\r\\n<option value=\\\"properties\\\">Properties</option>\\r\\n<option value=\\\"python\\\">Python</option>\\r\\n<option value=\\\"r\\\">R</option>\\r\\n<option value=\\\"rdoc\\\">RDoc</option>\\r\\n<option value=\\\"rhtml\\\">RHTML</option>\\r\\n<option value=\\\"ruby\\\">Ruby</option>\\r\\n<option value=\\\"rust\\\">Rust</option>\\r\\n<option value=\\\"sass\\\">SASS</option>\\r\\n<option value=\\\"scad\\\">SCAD</option>\\r\\n<option value=\\\"scala\\\">Scala</option>\\r\\n<option value=\\\"scheme\\\">Scheme</option>\\r\\n<option value=\\\"scss\\\">SCSS</option>\\r\\n<option value=\\\"sh\\\">SH</option>\\r\\n<option value=\\\"snippets\\\">snippets</option>\\r\\n<option value=\\\"sql\\\">SQL</option>\\r\\n<option value=\\\"stylus\\\">Stylus</option>\\r\\n<option value=\\\"svg\\\">SVG</option>\\r\\n<option value=\\\"tcl\\\">Tcl</option>\\r\\n<option value=\\\"tex\\\">Tex</option>\\r\\n<option value=\\\"text\\\">Text</option>\\r\\n<option value=\\\"textile\\\">Textile</option>\\r\\n<option value=\\\"toml\\\">Toml</option>\\r\\n<option value=\\\"twig\\\">Twig</option>\\r\\n<option value=\\\"typescript\\\">Typescript</option>\\r\\n<option value=\\\"vbscript\\\">VBScript</option>\\r\\n<option value=\\\"velocity\\\">Velocity</option>\\r\\n<option value=\\\"xml\\\">XML</option>\\r\\n<option value=\\\"xquery\\\">XQuery</option>\\r\\n<option value=\\\"yaml\\\">YAML</option>\\r\\n\";\n  }));\n\nHandlebars.registerPartial(\"common/themes\", Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<optgroup label=\\\"Bright\\\">\\r\\n    <option value=\\\"ace/theme/chrome\\\">Chrome</option>\\r\\n    <option value=\\\"ace/theme/clouds\\\">Clouds</option>\\r\\n    <option value=\\\"ace/theme/crimson_editor\\\">Crimson Editor</option>\\r\\n    <option value=\\\"ace/theme/dawn\\\">Dawn</option>\\r\\n    <option value=\\\"ace/theme/dreamweaver\\\">Dreamweaver</option>\\r\\n    <option value=\\\"ace/theme/eclipse\\\">Eclipse</option>\\r\\n    <option value=\\\"ace/theme/github\\\">GitHub</option>\\r\\n    <option value=\\\"ace/theme/solarized_light\\\">Solarized Light</option>\\r\\n    <option value=\\\"ace/theme/textmate\\\" selected=\\\"selected\\\">TextMate</option>\\r\\n    <option value=\\\"ace/theme/tomorrow\\\">Tomorrow</option>\\r\\n    <option value=\\\"ace/theme/xcode\\\">XCode</option>\\r\\n</optgroup>\\r\\n<optgroup label=\\\"Dark\\\">\\r\\n    <option value=\\\"ace/theme/ambiance\\\">Ambiance</option>\\r\\n    <option value=\\\"ace/theme/chaos\\\">Chaos</option>\\r\\n    <option value=\\\"ace/theme/clouds_midnight\\\">Clouds Midnight</option>\\r\\n    <option value=\\\"ace/theme/cobalt\\\">Cobalt</option>\\r\\n    <option value=\\\"ace/theme/idle_fingers\\\">idleFingers</option>\\r\\n    <option value=\\\"ace/theme/kr_theme\\\">krTheme</option>\\r\\n    <option value=\\\"ace/theme/merbivore\\\">Merbivore</option>\\r\\n    <option value=\\\"ace/theme/merbivore_soft\\\">Merbivore Soft</option>\\r\\n    <option value=\\\"ace/theme/mono_industrial\\\">Mono Industrial</option>\\r\\n    <option value=\\\"ace/theme/monokai\\\">Monokai</option>\\r\\n    <option value=\\\"ace/theme/pastel_on_dark\\\">Pastel on dark</option>\\r\\n    <option value=\\\"ace/theme/solarized_dark\\\">Solarized Dark</option>\\r\\n    <option value=\\\"ace/theme/terminal\\\">Terminal</option>\\r\\n    <option value=\\\"ace/theme/tomorrow_night\\\">Tomorrow Night</option>\\r\\n    <option value=\\\"ace/theme/tomorrow_night_blue\\\">Tomorrow Night Blue</option>\\r\\n    <option value=\\\"ace/theme/tomorrow_night_bright\\\">Tomorrow Night Bright</option>\\r\\n    <option value=\\\"ace/theme/tomorrow_night_eighties\\\">Tomorrow Night 80s</option>\\r\\n    <option value=\\\"ace/theme/twilight\\\">Twilight</option>    \\r\\n    <option value=\\\"ace/theme/vibrant_ink\\\">Vibrant Ink</option>\\r\\n</optgroup>\\r\\n\";\n  }));\n\nreturn this[\"JST\"];\n\n});","\ndefine('common/templates_compiled',['handlebars'], function(Handlebars) {\n\nthis[\"JST\"] = this[\"JST\"] || {};\n\nthis[\"JST\"][\"common/alert\"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"alert alert-\";\n  if (stack1 = helpers.type) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.type; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \" \";\n  if (stack1 = helpers.custClass) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.custClass; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \" fade in\\\" id=\\\"\";\n  if (stack1 = helpers.id) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.id; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n\t<button type=\\\"button\\\" data-dismiss=\\\"alert\\\" class=\\\"close\\\">&times;</button>\\r\\n\t<span>\";\n  if (stack1 = helpers.msg) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.msg; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n\nthis[\"JST\"][\"common/modal\"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"  <!-- Modal -->\\r\\n<div class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\">&times;</button>\\r\\n        <h4 class=\\\"modal-title\\\">\";\n  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</h4>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        \";\n  if (stack1 = helpers.body) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.body; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n      </div>\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        \";\n  if (stack1 = helpers.footer) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.footer; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n      </div>\\r\\n    </div><!-- /.modal-content -->\\r\\n  </div><!-- /.modal-dialog -->\\r\\n</div><!-- /.modal -->\\r\\n\";\n  return buffer;\n  });\n\nreturn this[\"JST\"];\n\n});","\ndefine('common/templates/main',[\n\t'handlebars',\n\t'./helpers',\n\t'common/partials_compiled',\n\t'common/templates_compiled',\n\t'lodash'\n], function (Handlebars, helpers, partials, templates, _) {\n\t// register helpers\n\t_.each(helpers || [], function (helper, name) {\n\t\tHandlebars.registerHelper(name, helper);\n\t});\n\n\treturn templates;\n});\n\ndefine('common/templates', ['common/templates/main'], function (main) { return main; });\n","\ndefine('edit/templates_compiled',['handlebars'], function(Handlebars) {\n\nthis[\"JST\"] = this[\"JST\"] || {};\n\nthis[\"JST\"][\"edit\"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); partials = this.merge(partials, Handlebars.partials); data = data || {};\n  var buffer = \"\", stack1, stack2, options, self=this, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\r\\n\t\t\t\t\t\";\n  stack1 = self.invokePartial(partials['common/languages'], 'common/languages', depth0, helpers, partials, data);\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\t\t\t\t\";\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\r\\n\t\t\t\t\t\";\n  stack1 = self.invokePartial(partials['common/keybindings'], 'common/keybindings', depth0, helpers, partials, data);\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\t\t\t\t\";\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\r\\n\t\t\t\t\t\";\n  stack1 = self.invokePartial(partials['common/themes'], 'common/themes', depth0, helpers, partials, data);\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\t\t\t\t\";\n  return buffer;\n  }\n\n  buffer += \"<div id=\\\"header\\\" class=\\\"navbar navbar-inverse navbar-fixed-top edit-header\\\" role=\\\"banner\\\">\\r\\n\t<div class=\\\"container\\\">\\r\\n\t\t<div class=\\\"navbar-header\\\">\\r\\n\t\t\t<a class=\\\"navbar-brand\\\" href=\\\"#\\\">RealEdit</a>\\r\\n\t\t</div>\\r\\n\t\t<div class=\\\"collapse navbar-collapse navbar-ex2-collapse\\\">\\r\\n\t\t\t<button id=\\\"new\\\" type=\\\"button\\\" class=\\\"btn btn-default navbar-btn btn-xs\\\">New</button>\\r\\n\t\t\t<button id=\\\"history\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-xs\\\">History</button>\\r\\n\t\t\t<button id=\\\"download\\\" type=\\\"button\\\" class=\\\"btn btn-default btn-xs\\\">Download</button>\\r\\n\t\t\t<div class=\\\"user-info pull-right\\\">\\r\\n\t\t\t\t<a href=\\\"#\\\" id=\\\"userName\\\">\";\n  if (stack1 = helpers.user) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.user; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</a>\\r\\n\t\t\t</div>\\r\\n\\r\\n\t\t\t<div class=\\\"pro-lang pull-right\\\">\\r\\n\t\t\t\t<span>Languages</span>\\r\\n\t\t\t\t\";\n  options = {hash:{\n    'id': (\"progLang\")\n  },inverse:self.noop,fn:self.program(1, program1, data),data:data};\n  stack2 = ((stack1 = helpers.select || depth0.select),stack1 ? stack1.call(depth0, depth0.language, options) : helperMissing.call(depth0, \"select\", depth0.language, options));\n  if(stack2 || stack2 === 0) { buffer += stack2; }\n  buffer += \"\\r\\n\t\t\t</div>\\r\\n\\r\\n\t\t\t<div class=\\\"key-binding pull-right\\\">\\r\\n\t\t\t\t<span>Key Binding</span>\\r\\n\t\t\t\t\";\n  options = {hash:{\n    'id': (\"keyBinding\")\n  },inverse:self.noop,fn:self.program(3, program3, data),data:data};\n  stack2 = ((stack1 = helpers.select || depth0.select),stack1 ? stack1.call(depth0, depth0.keybindi, options) : helperMissing.call(depth0, \"select\", depth0.keybindi, options));\n  if(stack2 || stack2 === 0) { buffer += stack2; }\n  buffer += \"\\r\\n\t\t\t</div>\\r\\n\\r\\n\t\t\t<div class=\\\"editor-theme pull-right\\\">\\r\\n\t\t\t\t<span>Theme</span>\\r\\n\t\t\t\t\";\n  options = {hash:{\n    'id': (\"editorTheme\")\n  },inverse:self.noop,fn:self.program(5, program5, data),data:data};\n  stack2 = ((stack1 = helpers.select || depth0.select),stack1 ? stack1.call(depth0, depth0.theme, options) : helperMissing.call(depth0, \"select\", depth0.theme, options));\n  if(stack2 || stack2 === 0) { buffer += stack2; }\n  buffer += \"\\r\\n\t\t\t</div>\\r\\n        </div>\\r\\n\\r\\n\t\t\\r\\n\t</div>\\r\\n</div>\\r\\n\\r\\n<div id=\\\"editCon\\\" class=\\\"container\\\">\\r\\n\t<div class=\\\"clearfix row\\\" style=\\\"position:relative\\\">\\r\\n\t\t<div class=\\\"sidebar col-xs-3\\\">\\r\\n\t\t\t<div class=\\\"user-list panel panel-default\\\">\\r\\n\t\t\t\t<div class=\\\"panel-heading\\\">\\r\\n\t\t\t\t\tUsers <span class=\\\"badge\\\" id=\\\"userNum\\\">0</span>\\r\\n\t\t\t\t</div>\\r\\n\t\t\t\t<div class=\\\"panel-body\\\">\\r\\n\t\t\t\t\t<ul id=\\\"usersList\\\">\\r\\n\t\t\t\t\t</ul>\\r\\n\\r\\n\t\t\t\t\t<div class=\\\"always-into-view\\\"></div>\\r\\n\t\t\t\t</div>\\r\\n\t\t\t</div>\\r\\n\\r\\n\t\t\t<div class=\\\"messages panel panel-default\\\">\\r\\n\t\t\t\t<div class=\\\"panel-heading\\\">\\r\\n\t\t\t\t\tMessages\\r\\n\t\t\t\t</div>\\r\\n\t\t\t\t<div class=\\\"panel-body\\\">\\r\\n\t\t\t\t\t<ul id=\\\"msgList\\\">\\r\\n\t\t\t\t\t</ul>\\r\\n\t\t\t\t\t\\r\\n\t\t\t\t\t<div class=\\\"always-into-view\\\"></div>\\r\\n\t\t\t\t</div>\\r\\n\t\t\t</div>\\r\\n\\r\\n\t\t\t<div class=\\\"chat-con panel panel-default\\\">\\r\\n\t\t\t\t<div class=\\\"panel-heading\\\">\\r\\n\t\t\t\t\tChat\\r\\n\t\t\t\t</div>\\r\\n\t\t\t\t<div class=\\\"panel-body\\\">\\r\\n\t\t\t\t\t<input id=\\\"message\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\r\\n\t\t\t\t</div>\\r\\n\t\t\t</div>\\r\\n\t\t</div>\\r\\n\t\t<div id=\\\"editor\\\" class=\\\"col-xs-9\\\"></div>\\r\\n\t</div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n\nthis[\"JST\"][\"edit/message\"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<li>\\n\t<span>\";\n  if (stack1 = helpers.user) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.user; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \":</span>\\n\t<br>\\n\t<span>\";\n  if (stack1 = helpers.msg) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.msg; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n</li>\\n\";\n  return buffer;\n  });\n\nthis[\"JST\"][\"edit/users\"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n\t<li>\";\n  if (stack1 = helpers.user) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.user; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \" <span>\"\n    + escapeExpression(((stack1 = ((stack1 = depth0.address),stack1 == null || stack1 === false ? stack1 : stack1.address)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span><li>\\n\";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0.users, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  });\n\nreturn this[\"JST\"];\n\n});","\ndefine('edit/templates/main',[\n\t'handlebars',\n\t'common/templates',\n\t'edit/templates_compiled',\n\t'lodash'\n], function (Handlebars, commonTemplates, templates, _) {\n\t// return compiled templates\n\treturn templates;\n});\n\ndefine('edit/templates', ['edit/templates/main'], function (main) { return main; });\n","\ndefine('common/ModalView',[\r\n\t'backbone',\r\n\t'common/templates'\r\n], function (Backbone, templates) {\r\n\tvar ModalView = Backbone.View.extend({\r\n\t\ttemplate: templates['common/modal'],\r\n\r\n\t\tinitialize: function (options) {\r\n\t\t\tthis.title = options.title;\r\n\t\t\tthis.body = options.body;\r\n\t\t\tthis.footer = options.footer;\r\n\r\n\t\t\tthis.render();\r\n\t\t},\r\n\r\n\t\trender: function () {\r\n\t\t\tthis.$el.html(this.template({\r\n\t\t\t\ttitle: this.title,\r\n\t\t\t\tbody: this.body,\r\n\t\t\t\tfooter: this.footer\r\n\t\t\t}));\r\n\r\n\t\t\t$(document.body).append(this.$el);\r\n\r\n\t\t\tthis.$('.modal').modal();\r\n\t\t}\r\n\t});\r\n\r\n\treturn ModalView;\r\n});\r\n","\ndefine('common/PromptView',[\r\n\t'common/ModalView'\r\n], function (ModalView) {\r\n\tvar PromptView = ModalView.extend({\r\n\t\tevents: {\r\n\t\t\t'click .btn-ok': 'ok',\r\n\t\t\t'click .btn-close': 'cancel'\r\n\t\t},\r\n\t\tinitialize: function (options) {\r\n\t\t\tthis.title = options.title || '';\r\n\t\t\tthis.body = (options.prompt || '') + '<br><br><input type=\"text\" class=\"prompt-input\">';\r\n\t\t\tthis.footer = '<button type=\"button\" class=\"btn btn-close btn-default\" data-dismiss=\"modal\">Close</button>' +\r\n\t\t\t\t'<button type=\"button\" class=\"btn btn-ok btn-primary\" data-dismiss=\"modal\">OK</button>';\r\n\r\n\t\t\tthis.render();\r\n\r\n\t\t\tthis.$('.prompt-input').focus();\r\n\t\t},\r\n\t\tok: function () {\r\n\t\t\tthis.options.callback && this.options.callback(this.$('.prompt-input').val());\r\n\t\t},\r\n\t\tcancel: function () {\r\n\t\t\tthis.options.callback && this.options.callback(null);\r\n\t\t}\r\n\t});\r\n\r\n\treturn PromptView;\r\n});\r\n","\ndefine('edit/EditView',[\n\t'lodash',\n\t'backbone',\n\t'edit/templates',\n\t'jquery',\n\t'common/utils',\n\t'common/PromptView',\n\t'dmp'\n], function(_, Backbone, templates, $, utils, PromptView, Dmp) {\n\tvar EditView = Backbone.View.extend({\n\t\ttagName: 'div',\n\t\tid: 'editPage',\n\n\t\ttemplate: templates.edit,\n\n\t\tevents: {\n\t\t\t'click #userName': 'changeUserName',\n\t\t\t'change #keyBinding': 'changeKeyBinding',\n\t\t\t'change #progLang': 'changeProgrammingLanguage',\n\t\t\t'change #editorTheme': 'changeEditorTheme',\n\t\t\t'keydown #message': 'chat',\n\t\t\t'click #new': 'createNewFile'\n\t\t},\n\n\t\tinitialize: function(options) {\n\t\t\tthis.listenTo(this.model, 'change', this.render);\n\t\t\tthis.listenTo(this.model, 'change:user', this.updateUserInfo);\n\t\t\tthis.listenTo(this.model, 'change:language', this.updateEditorStatus);\n\t\t\tthis.listenTo(this.model, 'change:keybindi', this.updateEditorStatus);\n\t\t\tthis.listenTo(this.model, 'change:theme', this.updateEditorStatus);\n\n\t\t\tthis.fileName = options.fileName;\n\n\t\t\tthis.socket = io.connect('/');\n\t\t\tthis.socket.on('connect', _.bind(this.onSocketConnect, this));\n\t\t\tthis.socket.on('socket:new', _.bind(this.onSocketNew, this));\n\t\t\tthis.socket.on('user:changed', _.bind(this.onUserChange, this));\n\t\t\tthis.socket.on('message:new', _.bind(this.onNewMessage, this));\n\t\t\tthis.socket.on('doc:init', _.bind(this.onDocInit, this));\n\t\t\tthis.socket.on('doc:ack', _.bind(this.onDocAck, this));\n\t\t\tthis.socket.on('doc:changed', _.bind(this.onDocRemoteChanged, this));\n\t\t\tthis.socket.on('doc:sync', _.bind(this.onDocSync, this));\n\n\t\t\tthis.dmp = new Dmp();\n\n\t\t\tthis.opMap = {\n\t\t\t\t'insertText': 1,\n\t\t\t\t'insertLines': 1,\n\t\t\t\t'removeText': -1,\n\t\t\t\t'removeLines': -1\n\t\t\t};\n\n\t\t\tthis.changeArr = [];\n\t\t},\n\n\t\trender: function(model) {\n\t\t\t// make only render once\n\t\t\tif (this.rendered) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$el.html(this.template(this.model.toJSON()));\n\n\t\t\tvar that = this;\n\t\t\t// init ace editor\n\t\t\tif (typeof ace == 'undefined') {\n\t\t\t\tutils.loadScript('/ace-builds-1.1.01/src-min-noconflict/ace.js', function() {\n\t\t\t\t\tthat.initEditor();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tthat.initEditor();\n\t\t\t}\n\n\t\t\tif (!model.get('user')) {\n\t\t\t\tthis.$('#userName').html('unknown');\n\t\t\t\tthis.changeUserName();\n\t\t\t}\n\n\t\t\tthis.rendered = true;\n\t\t},\n\n\t\tinitEditor: function () {\n\t\t\twindow.aceEditor = this.editor = ace.edit(this.$('#editor')[0]);\n\t\t\tthis.$('.messages .panel-body').height($(window).height() - 421);\n\t\t\tthis.$('#editor').height($('.sidebar').height());\n\t\t\t\n\t\t\tthis.updateEditorStatus();\n\n\t\t\tthis.editor.focus();\n\n\t\t\tutils.loadScript('/ace-builds-1.1.01/src-min-noconflict/keybinding-emacs.js', function() {\n\t\t\t});\n\t\t\tutils.loadScript('/ace-builds-1.1.01/src-min-noconflict/keybinding-vim.js', function() {\n\t\t\t});\n\n\t\t\tthis.editor.on('change', _.bind(this.onEditorChange, this));\n\n\t\t\tthis.doc = this.editor.getSession().doc;\n\t\t},\n\n\t\tupdateEditorStatus: function () {\n\t\t\tif (this.editor) {\n\t\t\t\tthis.editor.setTheme(this.model.get('theme'));\n\t\t\t\tthis.editor.getSession().setMode('ace/mode/' + this.model.get('language'));\n\n\t\t\t\tvar binding = this.model.get('keybindi');\n\t\t\t\tthis.editor.setKeyboardHandler(binding ? 'ace/keyboard/' + binding : null);\n\t\t\t}\n\t\t},\n\n\t\tupdateUserInfo: function () {\n\t\t\tvar userName = this.model.get('user') || 'unknown';\n\t\t\tthis.$('#userName').html(userName);\n\t\t\tthis.socket.emit('username:change', {\n\t\t\t\tuser: userName\n\t\t\t});\n\t\t},\n\n\t\tchangeUserName: function () {\n\t\t\tvar that = this;\n\n\t\t\tnew PromptView({\n\t\t\t\ttitle: 'RealEdit',\n\t\t\t\tprompt: 'Please enter your user name:',\n\t\t\t\tcallback: function (name) {\n\t\t\t\t\tvar oldName = that.$('#userName').html();\n\n\t\t\t\t\tthat.model.set('user', name || oldName || '');\n\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tlocalStorage.realEditUser = name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\t\n\t\t},\n\n\t\tchangeKeyBinding: function () {\n\t\t\tvar keybinding = localStorage.realEditKeyBindi = this.$('#keyBinding').val();\n\t\t\tthis.model.set('keybindi', keybinding);\n\t\t},\n\n\t\tchangeProgrammingLanguage: function () {\n\t\t\tvar lang = localStorage.realEditProgLang = this.$('#progLang').val();\n\t\t\tthis.model.set('language', lang);\n\t\t},\n\n\t\tchangeEditorTheme: function () {\n\t\t\tvar theme = localStorage.realEditTheme = this.$('#editorTheme').val();\n\t\t\tthis.model.set('theme', theme);\n\t\t},\n\n\t\tchat: function (event) {\n\t\t\tif (event.which == 13) {\n\t\t\t\tvar msg = $.trim(this.$('#message').val());\n\t\t\t\tthis.socket.emit('chat', {\n\t\t\t\t\tchanel: this.fileName,\n\t\t\t\t\tmsg: msg,\n\t\t\t\t\tuser: this.model.get('user') || 'unknown'\n\t\t\t\t});\n\n\t\t\t\tthis.$('#message').val('');\n\t\t\t}\n\t\t},\n\n\t\tonSocketConnect: function () {\n\t\t\tthis.socket.emit('begin', {\n\t\t\t\tchanel: this.fileName,\n\t\t\t\tuser: this.model.get('user') || 'unknown'\n\t\t\t});\n\t\t},\n\n\t\tonSocketNew: function (data) {\n\t\t\tthis.socket.id = data;\n\t\t},\n\n\t\tonNewMessage: function (data) {\n\t\t\tthis.$('#msgList').append(templates['edit/message'](data));\n\n\t\t\t$('.messages .always-into-view')[0].scrollIntoView();\n\t\t},\n\n\t\tonUserChange: function (data) {\n\t\t\tthis.$('#usersList').html(templates['edit/users']({\n\t\t\t\tusers: data\n\t\t\t}));\n\n\t\t\t$('.user-list .always-into-view')[0].scrollIntoView();\n\t\t\t$('#userNum').html(data.length);\n\t\t},\n\n\t\tonEditorChange: function (event) {\n\t\t\tif (this.dontChange) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar data = event.data;\n\n\t\t\tvar op = this.opMap[data.action],\n\t\t\t\tmRange = this.getModifyRange(data);\n\n\n\t\t\tvar changeData = [_.uniqueId('c'), op, mRange.start, mRange.end, mRange.text];\n\n\t\t\tthis.changeArr.push(changeData);\n\n\t\t\tthis.sendChange();\n\t\t},\n\n\t\tsendChange: function () {\n\t\t\tif (this.pending) {\n\t\t\t\tconsole.log('pending now, please wait...');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.socket.emit('doc:change', {\n\t\t\t\tcr: this.curRevision,\n\t\t\t\tcg: this.changeArr\n\t\t\t});\n\n\t\t\tthis.pending = true;\n\t\t},\n\n\t\tonDocInit: function (rev) {\n\t\t\tthis.curRevision = rev.r;\n\t\t\tthis.curRevText = rev.c;\n\t\t\tthis.dontChange = true;\n\t\t\tthis.doc.setValue(rev.c);\n\t\t\tthis.dontChange = false;\n\t\t},\n\n\t\tonDocAck: function (data) {\n\t\t\tvar canUpdateRevision = this.curRevision < data.nr && this.curRevision == data.or &&\n\t\t\t\t!data.ph;\n\n\t\t\tvar changedIds = data.id,\n\t\t\t\tchangeArr = this.changeArr;\n\n\t\t\tthis.changeArr = _.filter(changeArr, function (change) {\n\t\t\t\treturn changedIds.indexOf(change[0]) == -1;\n\t\t\t});\n\n\t\t\tif (canUpdateRevision) {\n\t\t\t\tconsole.log('update to revision: ', data.nr);\n\t\t\t\tthis.curRevision = data.nr;\n\t\t\t\tthis.curRevText = utils.merge(this.curRevText, data.cg);\n\t\t\t}\n\n\t\t\tthis.pending = false;\n\n\t\t\tif (this.changeArr.length > 0) {\n\t\t\t\tthis.sendChange();\n\t\t\t}\n\t\t},\n\n\t\tonDocRemoteChanged: function (data) {\n\t\t\tif (data.fr == this.socket.id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar newRevision = data.nr,\n\t\t\t\tbaseRevision = data.or,\n\t\t\t\tchanges = data.cg,\n\t\t\t\tpatches = data.ph,\n\t\t\t\tcurRevision = this.curRevision;\n\n\t\t\tif (curRevision == newRevision) {\n\t\t\t\tconsole.log('already newest');\n\t\t\t} else if (curRevision < newRevision && curRevision == baseRevision) {\n\t\t\t\tconsole.log('can merge');\n\t\t\t\tvar text = this.doc.getValue(),\n\t\t\t\t\tcursorPos = this.doc.positionToIndex(this.editor.getCursorPosition()),\n\t\t\t\t\tnewText = text,\n\t\t\t\t\tmergeResult = null;\n\t\t\t\tthis.dontChange = true;\n\n\t\t\t\tif (patches)  {\n\t\t\t\t\tnewText = this.dmp.patch_apply(patches, text)[0];\n\t\t\t\t\tthis.curRevText = this.dmp.patch_apply(patches, this.curRevText)[0];\n\t\t\t\t} else {\n\t\t\t\t\tmergeResult = utils.merge(text, changes, cursorPos);\n\t\t\t\t\tnewText = mergeResult.text;\n\t\t\t\t\tcursorPos = mergeResult.cursorPos;\n\t\t\t\t\tthis.curRevText = utils.merge(this.curRevText, changes);\n\t\t\t\t}\n\n\n\t\t\t\tthis.doc.setValue(newText); //todo, need optimization\n\t\t\t\tthis.editor.moveCursorToPosition(this.doc.indexToPosition(cursorPos));\n\t\t\t\tthis.editor.clearSelection();\n\n\t\t\t\tthis.dontChange = false;\n\t\t\t\tthis.curRevision = newRevision;\n\t\t\t} else if (curRevision > newRevision) {\n\t\t\t\t// throw new Error('unexcepted error occurs');\n\t\t\t\tconsole.log('old revision arrived, ignore that');\n\t\t\t} else { // current revision is behind of baseRevision many revsions, should sync latest Revision\n\t\t\t\tthis.syncLatestRevision();\n\t\t\t\tconsole.log('need sync');\n\t\t\t}\n\t\t},\n\n\t\tsyncLatestRevision: function () {\n\t\t\tthis.socket.emit('doc:needSync', this.curRevision);\n\t\t},\n\n\t\tonDocSync: function (data) {\n\t\t\tconsole.log('doc sync: ', data);\n\t\t\tvar revs = data.rs,\n\t\t\t\tbaseText = this.curRevText,\n\t\t\t\tbaseRevId = parseInt(this.curRevision, 10);\n\n\t\t\tthis.dontChange = true;\n\t\t\tvar canUpdate = false;\n\n\t\t\t_.each(revs, function (rev) {\n\t\t\t\tconsole.log('rev: ', rev);\n\n\t\t\t\tif (parseInt(rev.r, 10) == baseRevId + 1) {\n\t\t\t\t\tcanUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tif (canUpdate && rev.r > baseRevId) {\n\t\t\t\t\tif (rev.p) {\n\t\t\t\t\t\tbaseText = this.dmp.patch_apply(rev.g, baseText)[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbaseText = utils.merge(baseText, rev.g);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.curRevision = rev.r;\n\t\t\t\t\tthis.curRevText = baseText;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tconsole.log('newText: ', baseText);\n\t\t\tvar curValue = this.doc.getValue();\n\t\t\tvar patches = this.dmp.patch_make(baseText, curValue);\n\n\t\t\tvar cursorPosition = this.editor.getCursorPosition();\n\t\t\tthis.doc.setValue(this.dmp.patch_apply(patches, baseText));\n\t\t\tthis.editor.moveCursorToPosition(cursorPosition);\n\t\t\tthis.editor.clearSelection();\n\n\t\t\tthis.dontChange = false;\n\t\t},\n\n\t\tgetModifyRange: function (change) {\n\t\t\tvar start = this.doc.positionToIndex(change.range.start),\n\t\t\t\tend = start,\n\t\t\t\ttext = '',\n\t\t\t\tnl = this.doc.getNewLineCharacter();\n\n\t\t\tif (change.action == 'removeLines' || change.action == 'insertLines') {\n\t\t\t\tvar nlNums = change.lines.length * nl.length,\n\t\t\t\t\ttextNums = 0;\n\t\t\t\t\t_.each(change.lines, function (line) {\n\t\t\t\t\t\ttextNums += line.length;\n\t\t\t\t\t\ttext += line + nl;\n\t\t\t\t\t});\n\n\n\t\t\t\tend = start + textNums + nlNums;\n\t\t\t} else {\n\t\t\t\tend = start + change.text.length;\n\t\t\t\ttext = change.text;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tstart: start,\n\t\t\t\tend: end,\n\t\t\t\ttext: text\n\t\t\t};\n\t\t},\n\n\t\tcreateNewFile: function () {\n\t\t\tlocation.href = '/new';\n\t\t}\n\t});\n\n\treturn EditView;\n});\n","\ndefine('edit/main',[\r\n\t'./EditView',\r\n\t'app',\r\n\t'backbone',\r\n\t'jquery',\r\n\t'common/utils',\r\n\t'common/PromptView',\r\n\t'socket.io'\r\n], function(EditView, app, Backbone, $, utils, ModalView, io) {\r\n\treturn function(router, routeName, initData, fileName) {\r\n\t\tvar model = new Backbone.Model(),\r\n\t\t\teditView = new EditView({\r\n\t\t\t\tmodel: model,\r\n\t\t\t\tfileName: fileName\r\n\t\t\t});\r\n\r\n\t\tapp.views.push(editView);\r\n\r\n\t\t$('#main').append(editView.el);\r\n\r\n\t\tmodel.set({\r\n\t\t\tuser: localStorage.realEditUser || '',\r\n\t\t\tlanguage: localStorage.realEditProgLang || 'javascript',\r\n\t\t\tkeybindi: localStorage.realEditKeyBindi || '',\r\n\t\t\ttheme: localStorage.realEditTheme || 'ace/theme/textmate'\r\n\t\t});\r\n\t};\r\n});\r\n"]}